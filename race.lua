------------------------------------------------------------------------
--                  Race script exemple                               --
--                  Created for HappinessMP                           -- 
--                  Based on race from redrp                          --
--                  Custom By LeChapellierFou                         --
--                                                         18/05/2025 --
------------------------------------------------------------------------


local StartRace = {
    {-1970.84000000, -93.84000000, 6.14000000, 90.00000000},
	{-968.99070000, 1170.28300000, 16.87510000, 90.00000000},
	{-1761.94600000, -94.56340000, 5.18500000, 269.99040000},
	{-1202.77000000, -220.06000000, 3.36000000, 270.00000000},
	{-1278.88500000, 457.61740000, 16.83700000, 359.86800000},
	{-1242.15000000, 862.64860000, 18.61500000, 180.00000000},--6
	{-1210.44000000, 1163.16000000, 15.62260000, 90.00000000},
	{-501.57000000, -33.01000000, 8.64000000, 0.21340000},
	{-551.24000000, 1498.87000000, 12.14700000, 0.50000000},
	{-49.50000000, 620.61000000, 14.08000000, 90.00000000},-- 10
	{-203.76080000, 393.84630000, 13.87050000, 180.00000000},
	{-358.16000000, 1171.51000000, 14.18000000, 0.00000000},
	{718.97000000, 271.19000000, 41.09000000, 89.77740000},
	{1127.99500000, -569.01780000, 12.59180000, 270.00000000},
	{548.87000000, 1783.08000000, 31.22000000, 90.00000000},
	{502.30000000, 1783.38000000, 27.66000000, 270.00000000},
	{1250.45000000, 665.58000000, 37.21000000, 156.12400000},
	{1261.23000000, 694.32580000, 36.06260000, 155.92580000},
	{1097.00300000, 84.11261000, 33.29610000, 0.00000000},
	{2348.65000000, 818.32000000, 4.80780000, 226.29640000}
}

local RaceTracks = {
	
	{ -- 1
		{-2036.58000000, -93.74580000, 5.75520000, 90.00000000},
        {-2185.35900000, -87.01940000, 5.77490000, 31.16130000},
        {-2191.26300000, 151.55770000, 11.93330000, 349.02860000},
        {-2017.05900000, 188.57930000, 10.81180000, 261.98460000},
        {-1869.47900000, 176.06110000, 12.31130000, 291.43740000},
        {-1724.37300000, 242.44980000, 19.83770000, 330.95560000},
        {-1604.26800000, 451.89710000, 24.48230000, 330.03540000},
        {-1669.45300000, 501.06870000, 24.48850000, 58.95410000},
        {-1673.42400000, 568.70080000, 25.01920000, 73.62520000},
        {-1834.22800000, 410.26970000, 21.41310000, 144.35810000},
        {-2016.50600000, 178.02450000, 24.17700000, 142.48670000},
        {-2138.29000000, -25.27000000, 12.66070000, 190.30400000},
        {-2026.63400000, -7.76380000, 5.98810000, 271.41750000},
        {-1959.57200000, -7.79360000, 5.35090000, 270.47310000},
        {-1926.21000000, -95.35000000, 5.96000000, 90.00000000},
		{-1970.84000000, -93.84000000, 6.14000000, 90.00000000}
	},

	{ 
		{-1382.97600000, 1170.28400000, 29.66390000, 90.00000000},
        {-1651.83400000, 988.60050000, 29.66390000, 177.05010000},
        {-1731.41700000, 762.61190000, 27.75660000, 145.92670000},
        {-1813.42300000, 439.78820000, 21.10550000, 146.00650000},
        {-1998.30400000, 172.50090000, 24.54870000, 169.68120000},
        {-1858.40000000, -165.47410000, 50.17670000, 204.83660000},
        {-1636.99700000, -500.85280000, 50.17720000, 270.56430000},
        {-1415.58200000, -267.97330000, 50.17610000, 0.00000000},
        {-1408.95800000, 62.01460000, 50.17270000, 0.00000000},
        {-1276.65500000, 342.52430000, 50.17720000, 0.00000000},
        {-1242.24800000, 742.79110000, 19.27560000, 354.25490000},
        {-1104.43700000, 778.99300000, 18.94080000, 270.67900000},
        {-988.40590000, 779.17050000, 3.64880000, 270.46150000},
        {-915.34540000, 881.69830000, 12.71290000, 0.50840000},
        {-909.26340000, 1002.97300000, 19.67840000, 0.00000000},
        {-900.95560000, 1140.26400000, 17.57840000, 90.00000000},
		{-968.99070000, 1170.28300000, 16.87510000, 90.00000000}
	},

	{
		{-1647.29400000, -79.80460000, 5.82430000, 286.27680000},
		{-1486.30000000, -20.93240000, 6.12940000, 307.11670000},
		{-1425.64300000, 60.46000000, 6.39780000, 330.20660000},
		{-1320.34700000, 123.55900000, 6.11780000, 315.10240000},
		{-1284.19100000, 233.78310000, 9.48670000, 1.10320000},
		{-1500.18200000, 232.59480000, 10.22180000, 92.04500000},
		{-1717.88900000, 230.03250000, 19.59140000, 87.45860000},
		{-1886.80100000, 169.65800000, 11.28930000, 111.55610000},
		{-1905.30600000, 90.49920000, 5.73780000, 96.67520000},
		{-1986.74400000, 71.24640000, 6.46710000, 150.04370000},
		{-1989.70200000, -0.73770000, 5.55330000, 267.39880000},
		{-1951.63300000, -8.05690000, 5.36260000, 210.12370000},
		{-1908.01200000, -94.92470000, 5.89550000, 270.00000000},
		{-1761.94600000, -94.56340000, 5.18500000, 269.99040000}
	},

	{
		{-1142.99500000, -198.41350000, 5.00880000, 290.69260000},
		{-1046.87700000, -248.73190000, 2.04650000, 210.29530000},
		{-1110.47200000, -306.86350000, 2.07040000, 87.44630000},
		{-1258.08900000, -308.31520000, 2.07960000, 98.29740000},
		{-1297.53100000, -355.06630000, 1.97440000, 145.29490000},
		{-1334.74700000, -366.05880000, 1.90680000, 128.31110000},
		{-1345.95200000, -434.85790000, 2.01940000, 153.87490000},
		{-1491.06200000, -452.03580000, 2.10990000, 70.01580000},
		{-1505.70400000, -324.26330000, 1.94240000, 318.36660000},
		{-1364.81800000, -362.99260000, 1.94170000, 245.04680000},
		{-1346.12000000, -431.07910000, 1.94270000, 200.39420000},
		{-1308.65300000, -451.53920000, 1.79880000, 248.05790000},
		{-1310.28200000, -509.45770000, 1.94910000, 143.39770000},
		{-1696.19400000, -487.12140000, 1.94870000, 98.27111000},
		{-1719.85800000, -594.60530000, 1.94570000, 152.90510000},
		{-1856.21000000, -644.06000000, 1.83700000, 8.22360100},
		{-1883.19400000, -497.71160000, 2.08930000, 89.45180000},
		{-1962.26600000, -495.06930000, 2.04620000, 89.45180000},
		{-1959.14100000, -320.73310000, 2.15400000, 272.90640000},
		{-1820.47100000, -339.03180000, 2.14640000, 258.36540000},
		{-1758.16900000, -388.53230000, 2.12710000, 233.01840000},
		{-1599.40300000, -246.40570000, 2.41200000, 270.01440000},
		{-1202.77000000, -220.06000000, 3.36000000, 270.00000000}
	},

	{
		{-1263.66800000, 612.94150000, 11.59500000, 326.92500000},
		{-1186.38000000, 765.17210000, 18.37940000, 3.20350000},
		{-1354.20400000, 778.85030000, 18.60980000, 86.62950000},
		{-1437.47800000, 686.52190000, 18.61080000, 148.85050000},
		{-1456.33000000, 652.18000000, 18.61080000, 148.85050000},
		{-1568.20000000, 680.69000000, 24.50850000, 89.61330000},
		{-1585.12400000, 589.02980000, 24.48310000, 180.59300000},
		{-1586.49600000, 482.88960000, 24.49020000, 153.63330000},
		{-1608.93600000, 443.09920000, 24.48280000, 151.40020000},
		{-1513.90200000, 418.30940000, 18.64390000, 269.73320000},
		{-1425.00600000, 392.85810000, 15.09220000, 269.92040000},
		{-1354.64300000, 358.24720000, 13.66990000, 180.35650000},
		{-1297.55900000, 341.47670000, 13.71660000, 270.50630000},
		{-1278.88500000, 457.61740000, 16.83700000, 359.86800000}
	},

	{
		{-1265.40700000, 680.51210000, 27.14220000, 171.28700000},
		{-1288.67500000, 534.35770000, 48.58820000, 176.16870000},
		{-1290.35300000, 384.20530000, 50.18640000, 179.83140000},
		{-1352.43800000, 260.58880000, 50.18500000, 123.85530000},
		{-1422.36100000, 104.63080000, 49.94330000, 179.72420000},
		{-1423.36000000, -100.86000000, 7.02440000, 90.87079000},
		{-1502.75800000, -101.09150000, 6.81800000, 78.75430000},
		{-1539.53300000, 46.09630000, 8.22500000, 359.16550000},
		{-1500.70100000, 69.44710000, 7.70480000, 290.32850000},
		{-1488.37800000, 185.63770000, 9.45210000, 0.00000000},
		{-1478.63800000, 359.15240000, 18.32910000, 0.00000000},
		{-1478.83400000, 506.22780000, 18.61340000, 0.00000000},
		{-1438.82000000, 646.84740000, 18.61460000, 328.84010000},
		{-1390.67000000, 749.00260000, 18.68230000, 356.07880000},
		{-1404.61000000, 844.69870000, 18.56140000, 359.87510000},
		{-1242.15000000, 862.64860000, 18.61500000, 180.00000000}
	},

	{
		{-1349.93100000, 1163.08500000, 16.14000000, 90.00380000},
		{-1428.20200000, 1163.72500000, 21.98680000, 90.00380000},
		{-1406.00200000, 1262.64200000, 22.98440000, 311.09120000},
		{-1301.89800000, 1327.24800000, 20.75280000, 270.54950000},
		{-1249.69400000, 1432.25500000, 18.68860000, 270.96710000},
		{-1225.43300000, 1492.80700000, 22.79250000, 352.08930000},
		{-1272.62500000, 1536.97300000, 21.14890000, 15.82010000},
		{-1274.88600000, 1601.72000000, 29.86710000, 0.54180000},
		{-1319.54400000, 1613.79400000, 26.81120000, 90.46500000},
		{-1298.84600000, 1717.00600000, 26.69380000, 270.91750000},
		{-1280.89200000, 1793.22600000, 17.95460000, 360.32250000},
		{-1149.65600000, 1799.75500000, 12.67940000, 271.67820000},
		{-983.79370000, 1765.50700000, 11.05080000, 202.08260000},
		{-974.46470000, 1606.36400000, 22.89190000, 180.41740000},
		{-1047.93200000, 1514.52000000, 23.44840000, 145.71940000},
		{-1052.50300000, 1267.94100000, 23.43170000, 179.99900000},
		{-1095.62500000, 1233.52800000, 23.51050000, 181.89390000},
		{-1095.15800000, 1177.40600000, 15.79030000, 90.00330000},
		{-1210.44000000, 1163.16000000, 15.62260000, 90.00000000}
	},

	{
		{-503.05770000, 159.15530000, 6.88740000, 15.19650000},
		{-542.61410000, 313.33060000, 5.70420000, 0.44160000},
		{-545.39810000, 655.18330000, 5.70000000, 3.92240000},
		{-629.85540000, 876.76100000, 5.70400000, 15.03660000},
		{-641.80290000, 1078.62100000, 8.67710000, 0.22650000},
		{-590.42970000, 1331.04000000, 16.06220000, 341.30310000},
		{-574.04630000, 1406.49800000, 14.57850000, 341.53620000},
		{-550.42160000, 1419.25200000, 14.52090000, 182.38150000},
		{-549.88210000, 1354.59500000, 16.51890000, 182.38150000},
		{-591.19460000, 1332.51100000, 16.11060000, 156.41570000},
		{-647.55490000, 1252.67100000, 14.98340000, 156.25490000},
		{-661.85270000, 990.41440000, 8.81380000, 183.32480000},
		{-558.73000000, 652.49710000, 5.70060000, 191.58360000},
		{-543.41970000, 274.02130000, 5.70930000, 208.17330000},
		{-468.24210000, 261.02550000, 8.89480000, 270.39900000},
		{-456.06950000, 197.38280000, 8.90429900, 180.34710000},
		{-456.13060000, -37.59410000, 8.90520000, 179.47620000},
		{-455.55120000, -221.58710000, 6.93540000, 180.36540000},
		{-480.78490000, -239.54850000, 6.98510000, 123.04440000},
		{-501.57000000, -33.01000000, 8.64000000, 0.21340000}
	},

	{
		{-529.61920000, 1677.63800000, 7.36780000, 317.82180000},
		{-405.71820000, 1755.13500000, 7.91710000, 273.01690000},
		{-193.15870000, 1697.46700000, 15.34120000, 255.37760000},
		{-121.84780000, 1688.56100000, 16.39570000, 273.74120000},
		{-31.13020000, 1592.86600000, 10.53200000, 227.45370000},
		{9.97710000, 1466.86200000, 8.30400000, 179.43060000},
		{39.00940000, 1356.67800000, 15.32770000, 179.83030000},
		{88.16400000, 1288.82100000, 14.16190000, 197.41800000},
		{123.31110000, 1189.24400000, 13.89890000, 179.98550000},
		{54.27000000, 1167.07000000, 13.80880000, 89.43830000},
		{-21.76430000, 1171.31200000, 13.81940000, 89.39880000},
		{-70.89300000, 1263.46400000, 19.47920000, 88.99580000},
		{-237.70980000, 1263.67400000, 23.21410000, 89.37870000},
		{-261.43640000, 1331.58100000, 24.67600000, 1.25050000},
		{-265.86330000, 1419.76600000, 19.96200000, 90.47600000},
		{-389.93190000, 1419.74600000, 11.30280000, 90.47600000},
		{-537.12000000, 1418.94000000, 14.22000000, 0.00000000},
		{-551.24000000, 1498.87000000, 12.14700000, 0.50000000}
	},

	{
		{-345.09240000, 621.27550000, 13.76320000, 89.28650000},
		{-363.71180000, 921.04380000, 13.76130000, 359.40720000},
		{-217.13640000, 948.07790000, 9.90990000, 268.38640000},
		{-67.04520000, 933.39170000, 13.75860000, 270.04770000},
		{-49.09020000, 1148.96800000, 13.81760000, 0.11690000},
		{-345.26430000, 1167.65300000, 13.81760000, 90.35209000;},
		{-363.79970000, 946.43920000, 13.76220000, 180.07190000},
		{-214.48550000, 948.16010000, 9.90270100, 269.78940000},
		{-67.70860000, 933.64770000, 13.75990000, 269.35120000},
		{-49.50000000, 620.61000000, 14.08000000, 90.00000000}
	},

	{
		{-204.17230000, 257.32640000, 13.87070000, 180.82100000},
		{-203.81000000, 27.97550000, 13.75740000, 178.35570000},
		{-203.64340000, -132.40640000, 13.50730000, 180.00000000},
		{-121.52820000, -157.15640000, 13.73770000, 267.35970000},
		{-162.26320000, 87.81500000, 13.81570000, 13.17130000},
		{-204.17230000, 257.32640000, 13.87070000, 14.34340000},
		{-270.64990000, 531.96190000, 13.90750000, 2.41350000},
		{-222.43480000, 543.77630000, 13.85540000, 182.36130000},
		{-203.76080000, 393.84630000, 13.87050000, 180.00000000}
	},

	{
		{-351.54130000, 1266.42700000, 22.12670000, 2.24300000},
		{-351.61520000, 1349.39000000, 15.30720000, 0.09100000},
		{-348.40340000, 1550.74300000, 19.22060000, 339.98640000},
		{-257.80260000, 1575.04000000, 19.46800000, 268.98110000},
		{-109.68530000, 1587.51100000, 28.96480000, 287.46860000},
		{155.60120000, 1725.92600000, 28.96270000, 298.64070000},
		{324.47470000, 1774.11000000, 16.93070000, 269.71380000},
		{351.27280000, 1659.34800000, 14.98810000, 196.61640000},
		{416.98530000, 1513.63600000, 15.64580000, 209.13580000},
		{493.64200000, 1373.84800000, 10.95880000, 199.34530000},
		{543.55510000, 1260.34800000, 19.92850000, 180.04400000},
		{543.23580000, 1084.90900000, 19.89850000, 179.16440000},
		{411.11230000, 1020.19900000, 25.99730000, 90.00200000},
		{296.99510000, 1017.78800000, 23.76610000, 90.00000000},
		{187.99570000, 1017.25800000, 13.76620000, 89.13040000},
		{153.39870000, 1150.95900000, 13.75410000, 22.55540000},
		{29.65580000, 1173.12900000, 13.81780000, 90.02150000},
		{-120.47430000, 1173.11400000, 13.82510000, 90.00090000},
		{-270.65890000, 1173.07700000, 13.82590000, 92.07000000},
		{-358.16000000, 1171.51000000, 14.18000000, 0.00000000}
	},

	{
		{332.21810000, 272.76720000, 43.70310000, 88.67220000},
		{-30.70580000, 267.37320000, 13.80930000, 89.80069000},
		{-50.24350000, 597.48930000, 14.36590000, 358.15660000},
		{-43.47570000, 994.47510000, 13.76250000, 359.19240000},
		{33.38220000, 1012.01700000, 13.70670000, 270.00000000},
		{323.79250000, 1004.00600000, 25.39140000, 268.32650000},
		{440.33680000, 996.45320000, 26.01220000, 258.65370000},
		{542.66110000, 807.50690000, 19.91830000, 180.12480000},
		{574.57120000, 624.42500000, 19.52130000, 240.21440000},
		{855.83380000, 617.57680000, 38.27010000, 270.63080000},
		{1067.91200000, 624.29440000, 37.68420000, 270.34750000},
		{1205.01800000, 620.77310000, 37.18890000, 240.47350000},
		{1170.43600000, 522.97050000, 27.86770000, 151.33440000},
		{1120.32500000, 424.19770000, 28.86290000, 162.59160000},
		{1083.38600000, 296.92150000, 30.03970000, 90.72750000},
		{912.43870000, 270.76630000, 42.17840000, 91.68410000},
		{718.97000000, 271.19000000, 41.09000000, 89.77740000}
	},

	{
		{1175.38400000, -568.36080000, 12.93860000, 270.16340000},
		{1192.40600000, -484.37330000, 12.99020000, 359.66400000},
		{1370.23600000, -454.32610000, 16.14870000, 319.02020000},
		{1380.31800000, -319.67300000, 19.29370000, 0.10210000},
		{1153.19200000, -334.01660000, 17.63840000, 90.96590000},
		{1120.66500000, -272.06830000, 19.69850000, 89.70860000},
		{1014.76500000, -270.75730000, 20.97160000, 90.78810000},
		{1018.30400000, -367.43590000, 18.96440000, 107.75490000},
		{634.07200000, -400.67840000, 40.12110000, 91.52890000},
		{218.42510000, -400.58600000, 14.50600000, 89.99890000},
		{27.96170000, -408.63210000, 13.76930000, 90.30030000},
		{-0.92860000, -625.76660000, 13.70560000, 183.83890000},
		{-114.80080000, -646.63290000, 13.81170000, 90.48850000},
		{-123.56480000, -785.02750000, 4.25560000, 261.21840000},
		{114.51440000, -730.95010000, 4.00230000, 300.03130000},
		{267.88810000, -668.78120000, 4.01810000, 328.03670000},
		{337.30500000, -509.17040000, 3.73810000, 359.99960000},
		{309.90620000, -407.71930000, 4.04680000, 89.35810000},
		{296.93150000, -253.15960000, 3.99890000, 90.28960000},
		{157.69660000, -234.07940000, 13.81080000, 180.72700000},
		{140.17250000, -389.50520000, 13.79840000, 269.99980000},
		{340.35630000, -415.68090000, 31.41800000, 271.45410000},
		{566.09320000, -415.84770000, 39.54340000, 248.28800000},
		{909.64140000, -422.12910000, 36.42470000, 215.92530000},
		{1049.37000000, -416.40770000, 17.39750000, 180.99470000},
		{1091.72500000, -553.69120000, 12.55520000, 272.24800000},
		{1127.99500000, -569.01780000, 12.59180000, 270.00000000}
	},

	{
		{362.72920000, 1783.13400000, 16.92760000, 89.27230000},
		{338.56740000, 1900.33000000, 18.52000000, 0.00000000},
		{346.94270000, 1935.62000000, 18.58850000, 330.82380000},
		{431.99210000, 1970.19100000, 22.60140000, 270.32820000},
		{653.02280000, 1973.75800000, 31.55430000, 267.18640000},
		{788.96950000, 1896.67400000, 45.15470000, 221.92680000},
		{860.30780000, 1828.38600000, 40.56030000, 214.57230000},
		{713.36900000, 1670.66100000, 22.81400000, 135.68240000},
		{735.50900000, 1592.08200000, 21.28970000, 225.35270000},
		{741.60680000, 1499.50900000, 13.29280000, 180.02220000},
		{669.27240000, 1484.82000000, 13.91980000, 89.24000000},
		{625.37040000, 1545.17700000, 19.26740000, 30.86080000},
		{581.69100000, 1620.97400000, 26.13430000, 26.47050000},
		{572.28940000, 1698.58300000, 30.55440000, 0.72039990},
		{548.87000000, 1783.08000000, 31.22000000, 90.00000000}
	},

	{
		{794.30940000, 1884.32300000, 33.30610000, 314.99890000},
		{890.53050000, 1915.49200000, 33.13930000, 269.99850000},
		{1085.00600000, 1913.05800000, 12.75220000, 267.63350000},
		{1384.28100000, 1854.58400000, 15.40100000, 241.51230000},
		{1486.24500000, 1755.73900000, 13.74910000, 191.36430000},
		{1415.42300000, 1615.11900000, 15.94440000, 106.23960000},
		{1190.39500000, 1605.09100000, 15.92180000, 42.58220000},
		{1090.38900000, 1688.56900000, 10.28940000, 97.10370000},
		{1033.00800000, 1645.31500000, 15.76560000, 130.50850000},
		{972.05520000, 1689.96000000, 15.74190000, 45.82090000},
		{850.00740000, 1590.12900000, 16.06230000, 143.00210000},
		{755.59740000, 1588.98400000, 21.21280000, 135.94790000},
		{818.71440000, 1487.63000000, 13.27860000, 179.94300000},
		{812.44410000, 1379.82300000, 13.25230000, 134.99960000},
		{655.79150000, 1359.57700000, 13.24210000, 89.61160000},
		{511.78170000, 1361.32900000, 10.96450000, 39.00780000},
		{404.61000000, 1535.91400000, 15.64650000, 26.15630000},
		{357.86170000, 1639.22500000, 14.97750000, 16.61450000},
		{337.88970000, 1759.08100000, 16.62050000, 359.40150000},
		{502.30000000, 1783.38000000, 27.66000000, 270.00000000}
	},

	{
		{1122.81100000, 425.69500000, 28.85150000, 167.62400000},
		{1097.93900000, 251.00730000, 30.35180000, 180.00000000},
		{1102.36300000, -70.34640000, 35.29850000, 180.82700000},
		{1116.18800000, -254.07260000, 19.76740000, 179.46990000},
		{1023.82500000, -270.50440000, 20.96000000, 89.99640000},
		{957.90490000, 0.96290000, 23.55150000, 44.55130000},
		{996.43590000, 105.50940000, 31.25330000, 327.43320000},
		{1097.09700000, 291.68690000, 30.22250000, 357.09170000},
		{1161.10300000, 501.80970000, 27.84920000, 330.42110000},
		{971.13570000, 551.51980000, 21.30680000, 90.01980000},
		{842.05710000, 561.23670000, 20.18510000, 50.58310000},
		{838.59220000, 660.87540000, 8.25010000, 348.33450000},
		{841.99390000, 852.78010000, 12.41870000, 0.00000000},
		{877.85320000, 896.30330000, 14.69870000, 279.78260000},
		{1039.41700000, 900.25430000, 30.66770000, 270.00040000},
		{1233.88100000, 900.34910000, 30.95160000, 270.04820000},
		{1267.97300000, 751.01870000, 35.37530000, 228.54490000},
		{1250.45000000, 665.58000000, 37.21000000, 156.12400000}	
	},

	{
		{1182.04600000, 535.37660000, 27.94620000, 155.32620000},
		{1251.70500000, 506.75320000, 27.01650000, 270.83090000},
		{1318.08200000, 507.94430000, 27.15740000, 270.29330000},
		{1335.79600000, 639.98220000, 37.71830000, 358.45130000},
		{1426.57000000, 651.87230000, 33.08060000, 269.99620000},
		{1559.85000000, 651.24210000, 27.66490000, 270.49330000},
		{1571.07300000, 729.31940000, 26.99620000, 359.73870000},
		{1706.91700000, 718.61440000, 24.99820000, 257.47240000},
		{1742.82000000, 843.39390000, 15.18990000, 341.05670000},
		{1763.74400000, 901.92540000, 14.90540000, 342.85730000},
		{1804.00000000, 978.47000000, 13.17540000, 327.20080000},
		{1717.56600000, 1049.51600000, 16.15140000, 120.81900000},
		{1614.48500000, 1000.15300000, 23.99740000, 97.00750000},
		{1352.41700000, 881.94170000, 12.86410000, 143.4034000},
		{1310.24400000, 791.03990000, 28.01730000, 151.19060000},
		{1261.23000000, 694.32580000, 36.06260000, 155.92580000}
	},

	{ 
		{1122.35400000, 421.84130000, 28.87070000, 332.28940000},
		{1265.86100000, 704.63820000, 35.83840000, 334.39740000},
		{1360.80400000, 873.41780000, 12.85890000, 321.63390000},
		{1490.33200000, 981.75210000, 13.02940000, 280.91600000},
		{1771.14600000, 940.04860000, 23.16940000, 259.15860000},
		{1961.73700000, 840.73610000, 8.74500000, 222.89900000},
		{2064.51300000, 552.44100000, 20.95520000, 185.22420000},
		{2074.16400000, 404.65340000, 19.52440000, 179.99730000},
		{2064.97700000, 253.43930000, 18.19580000, 164.09010000},
		{1900.15500000, 117.68440000, 17.17980000, 94.42350000},
		{1786.22500000, 150.24660000, 20.66210000, 36.81710000},
		{1675.60900000, 242.68080000, 24.85340000, 36.81710000},
		{1490.15500000, 272.39440000, 24.56800000, 87.99180000},
		{1302.49000000, 242.16950000, 35.65790000, 115.53660000},
		{1265.35900000, 118.77390000, 37.88040000, 179.80370000},
		{1266.22600000, -27.99020000, 29.84090000, 180.00020000},
		{1141.76800000, -71.03230000, 35.19050000, 89.12060000},
		{1097.00300000, 84.11261000, 33.29610000, 0.00000000}	
	},

	{-- 20
		{2579.61400000, 611.16800000, 4.85400000, 229.68280000},
		{2623.11600000, 529.40890000, 4.80800000, 138.62490000},
		{2570.15800000, 439.81750000, 4.80890000, 124.21750000},
		{2468.08600000, 394.50410000, 4.80790000, 90.78710000},
		{2434.98200000, 484.51580000, 5.09970000, 22.72300000},
		{2321.70400000, 516.79010000, 4.90330000, 15.00060000},
		{2226.06000000, 568.63370000, 4.90650000, 112.93130000;},
		{2180.90300000, 489.82190000, 5.09880000, 180.00090000},
		{2180.99800000, 344.81960000, 4.93150000, 180.14260000},
		{2237.42100000, 187.17000000, 4.83950000, 180.00460000},
		{2238.15800000, 107.79340000, 4.80810000, 180.00460000},
		{2276.39500000, 66.83410000, 4.80780000, 270.82980000},
		{2382.19000000, 92.02030000, 4.80770000, 319.63940000},
		{2516.22400000, 255.10020000, 4.80780000, 319.39740000},
		{2603.72100000, 406.01360000, 4.80850000, 30.74090000},
		{2533.69600000, 528.57130000, 4.80800000, 47.54890000},
		{2417.66500000, 631.99690000, 4.80800000, 48.53570000},
		{2247.47900000, 861.13170000, 4.85420000, 315.10650000},
		{2348.65000000, 818.32000000, 4.80780000, 226.29640000}
	}
}

local RaceMenu = {-228.093, 426.3605, 14.8188}

local Racename = {"Driving While High", "Exhaust Fumes", "Thunder Road", "Indutrial Action", "Short Circuit", "Don't Look Down", "Duck and Weave", "Drag King", "Rize In The East", "Horse Punch", "Stars in your Eyes", "Road to Bohan", "Round the Block", "Southern Switch", "Bogan's Run", "Bawhan Dash", "Heel-and-Toe", "Quick Knives", "Terminal Velocity", "Taxiing"}

local raceblip = {}
local MainCheckpoint = nil
local Lap = 1
local LapMax = 1
local SelectRaceId = nil 
local CheckPassed = 0
local StatRace = nil
local TimerA = 0
local RaceOn = false

-- Ganerate random Menu id
local MenuID = Game.GenerateRandomIntInRange(1, 10000)

local function ManageRace()
    local playerId = Game.GetPlayerId()
    local playerChar = Game.GetPlayerChar(playerId)
    local playerIndex = Game.ConvertIntToPlayerindex(playerId)
    
    if(StatRace == 0) then 
        Game.DoScreenFadeOut(500) 
        Thread.Pause(1000)
        Events.Call("Close_IVMenu", {})
        Game.SetCharCoordinates(playerChar, StartRace[SelectRaceId][1], StartRace[SelectRaceId][2], StartRace[SelectRaceId][3])	
        Thread.Pause(1000)
        local modelPc = Game.GetHashKey("SULTAN")-- name of veh
        local pveh = Spawn_Car(modelPc, StartRace[SelectRaceId][1], StartRace[SelectRaceId][2], StartRace[SelectRaceId][3], StartRace[SelectRaceId][4])
        Game.LockCarDoors(pveh, 4)-- lock all doors
        TimerA = Game.GetGameTimer();
        StatRace = 1
        Game.Wait(2000)
        Game.ForceLoadingScreen(false)
        Game.DoScreenFadeIn(500)
    elseif(StatRace == 1) then 
        if (TimerA ~= 0) then 
            local TimerB = Game.GetGameTimer();
            if ((TimerB - TimerA) > 1000) then 
                StatRace = 2
                TimerA = 0
            end
        end
    elseif(StatRace == 2) then 
        local pveh = Game.GetCarCharIsUsing(playerChar)
        Game.FreezeCarPosition(pveh, true)
        Game.PrintWithNumberBig( "NUMBER", 5, 1100, 1 )
        Game.PlayAudioEvent( "FRONTEND_OTHER_RACE_321" )
        Thread.Pause(1000)
        Game.PrintWithNumberBig( "NUMBER", 4, 1100, 1 )
        Game.PlayAudioEvent( "FRONTEND_OTHER_RACE_321" )
        Thread.Pause(1000)
        Game.PrintWithNumberBig( "NUMBER", 3, 1100, 1 )
        Game.PlayAudioEvent( "FRONTEND_OTHER_RACE_321" )
        Thread.Pause(1000)
        Game.PrintWithNumberBig( "NUMBER", 2, 1100, 1 )
        Game.PlayAudioEvent( "FRONTEND_OTHER_RACE_321" )
        Thread.Pause(1000)
        Game.PrintWithNumberBig( "NUMBER", 1, 1100, 1 )
        Game.PlayAudioEvent( "FRONTEND_OTHER_RACE_321" )
        Thread.Pause(1000)
        Game.PrintBig( "GO", 1500, 1)
        Game.PlayAudioEvent( "FRONTEND_OTHER_RACE_GO" )
        Game.FreezeCarPosition(pveh, false)
        CheckPassed = 1
        StatRace = 3
    elseif(StatRace == 3) then 
        if(CheckPassed > 0) then 
            Game.SetTextScale(0.3570, 0.4770)
            Game.SetTextDropshadow(0, 0, 0, 0, 0)
            Game.SetTextColour(7, 81, 255, 255)
            Game.DisplayTextWithLiteralString(0.8090, 0.6670+0.0300, "STRING", "Checkpoint ~w~: " .. CheckPassed .. "/" .. #RaceTracks[SelectRaceId])
            --
            Game.SetTextScale(0.3570, 0.4770)
            Game.SetTextDropshadow(0, 0, 0, 0, 0)
            Game.SetTextColour(7, 81, 255, 255)
            Game.DisplayTextWithLiteralString(0.8090, 0.6670, "STRING", "Lap ~w~: " .. Lap .. "/" .. LapMax)

            -- 1st checkpoint blip
            if(RaceTracks[SelectRaceId][CheckPassed] ~= nil) then
                
                if(raceblip[1] == nil) then -- final blip
                    raceblip[1] = Game.AddBlipForCoord(RaceTracks[SelectRaceId][CheckPassed][1], RaceTracks[SelectRaceId][CheckPassed][2], RaceTracks[SelectRaceId][CheckPassed][3])
                    if(Lap == LapMax) then -- ex : if lap 1/1 or 2/2 ....
                        if(CheckPassed == #RaceTracks[SelectRaceId]) then
                            Game.ChangeBlipSprite(raceblip[1], 65)
                        else
                            Game.ChangeBlipSprite(raceblip[1], 0)
                        end
                    end
                end
            end

            -- create checkpoint
            if(MainCheckpoint == nil) then 
                if(RaceTracks[SelectRaceId][CheckPassed] ~= nil) then
                    if(CheckPassed == #RaceTracks[SelectRaceId]) then -- derner checkpoint 
                        if(Lap == LapMax) then 
                            -- final flag
                            MainCheckpoint = Game.CreateCheckpoint( 7, RaceTracks[SelectRaceId][CheckPassed][1], RaceTracks[SelectRaceId][CheckPassed][2], RaceTracks[SelectRaceId][CheckPassed][3]+2.50000000, 0, 0, 0, 1.00000000 )
                        else
                            -- normal, premier checkpoint
                            MainCheckpoint = Game.CreateCheckpoint( 2, RaceTracks[SelectRaceId][CheckPassed][1], RaceTracks[SelectRaceId][CheckPassed][2], RaceTracks[SelectRaceId][CheckPassed][3]+2.50000000, RaceTracks[SelectRaceId][1][1], RaceTracks[SelectRaceId][1][2], RaceTracks[SelectRaceId][1][3]+2.50000000, 1.00000000 )
                        end
                    else
                        -- normal, checkpoint suivant 
                        if(RaceTracks[SelectRaceId][CheckPassed+1] ~= nil) then
                            MainCheckpoint = Game.CreateCheckpoint( 2, RaceTracks[SelectRaceId][CheckPassed][1], RaceTracks[SelectRaceId][CheckPassed][2], RaceTracks[SelectRaceId][CheckPassed][3]+2.50000000, RaceTracks[SelectRaceId][CheckPassed+1][1], RaceTracks[SelectRaceId][CheckPassed+1][2], RaceTracks[SelectRaceId][CheckPassed+1][3]+2.50000000, 1.00000000 )
                        end
                    end
                end
            end

            -- 2nd checkpoint blip
            if(RaceTracks[SelectRaceId][CheckPassed+1] ~= nil) then
                if(raceblip[2] == nil) then
                    raceblip[2] = Game.AddBlipForCoord(RaceTracks[SelectRaceId][CheckPassed+1][1], RaceTracks[SelectRaceId][CheckPassed+1][2], RaceTracks[SelectRaceId][CheckPassed+1][3])
                    Game.ChangeBlipScale(raceblip[2], 0.5)
                end
            end
            
            -- local player near to coord Table RaceTracks
            if(IsPlayerNearCoords(RaceTracks[SelectRaceId][CheckPassed][1], RaceTracks[SelectRaceId][CheckPassed][2], RaceTracks[SelectRaceId][CheckPassed][3], 6)) then
                -- checkpoint been passed
                if(raceblip[1] ~= nil) then 
                    Game.RemoveBlip(raceblip[1])
                    raceblip[1] = nil
                    Game.DeleteCheckpoint(MainCheckpoint)
                    MainCheckpoint = nil
                    Game.PlayAudioEvent( "FRONTEND_GAME_PICKUP_CHECKPOINT" )
                end

                if(raceblip[2] ~= nil) then 
                    Game.RemoveBlip(raceblip[2])
                    raceblip[2] = nil
                end

                CheckPassed = CheckPassed + 1 
                if(CheckPassed == #RaceTracks[SelectRaceId]+1) then
                    if(Lap == LapMax) then -- dernier tour
                        Print("You have finish the race !", 3000)
                        CheckPassed = 0
                        StatRace = 4
                    else -- tour suivant
                        Lap = Lap + 1
                        CheckPassed = 1
                        Game.PlayAudioEvent( "FRONTEND_GAME_PICKUP_CHECKPOINT_LAP" )
                    end
                end
            end
            
            -- logic death
            if(Game.IsPlayerDead(playerIndex)) then 
                StatRace = 4
            end
        end
    elseif(StatRace == 4) then 
        -- reset variables
        if(not Game.IsPlayerDead(playerIndex)) then 
            local pveh = Game.GetCarCharIsUsing(playerChar)
            Game.LockCarDoors(pveh, 1) -- unlock
        end
        if(raceblip[1] ~= nil) then 
            Game.RemoveBlip(raceblip[1])
            raceblip[1] = nil
        end
        if(raceblip[2] ~= nil) then 
            Game.RemoveBlip(raceblip[2])
            raceblip[2] = nil
        end
        if(MainCheckpoint ~= nil) then 
            Game.DeleteCheckpoint(MainCheckpoint)
            MainCheckpoint = nil
        end
        RaceOn = false
        Lap = 1
        LapMax = 1
        SelectRaceId = nil 
        CheckPassed = 0
        StatRace = 0
        TimerA = 0
    end		
end

Events.Subscribe("IVMenu_Setup_"..MenuID, function() 

    IVMenu.ItemCore.menu_len = 0
    
    IVMenu.ItemCore.title = "Race menu"

    if (IVMenu.ItemCore.menu_level == 0) then
        IVMenu.ItemCore.footer = "Main"
        
        IVMenu.ItemType.add_submenu("Race")
        IVMenu.ItemType.add_submenu("Laps")
        IVMenu.ItemType.add_item("Start Race")
    elseif (IVMenu.ItemCore.menu_level == 1) then
        if (IVMenu.ItemCore.last_selected[0] == 1) then
            IVMenu.ItemCore.footer = "Races"

            for i = 1, #Racename, 1 do 
                IVMenu.ItemType.add_item(Racename[i])
            end
        elseif (IVMenu.ItemCore.last_selected[0] == 2) then
            IVMenu.ItemCore.footer = "Laps"

            IVMenu.ItemType.add_item("1")
            IVMenu.ItemType.add_item("2")
            IVMenu.ItemType.add_item("3")
        end
    end
    
end, true)

Events.Subscribe("IVMenu_function_"..MenuID, function(I) 
   
    if (IVMenu.ItemCore.menu_level == 0) then
        if(I == 3) then 
            if(SelectRaceId ~= nil) then 
                StatRace = 0
                RaceOn = true
            else
                Print("You don't have select a tracks race")
            end
        end
        
    elseif (IVMenu.ItemCore.menu_level == 1) then
        if (IVMenu.ItemCore.last_selected[0] == 1) then
            SelectRaceId = I
            Print("Tracks : "..Racename[I], 2000)
        elseif (IVMenu.ItemCore.last_selected[0] == 2) then
            LapMax = I
            Print("Laps : "..LapMax, 2000)
        end
    end
end, true)

Events.Subscribe("scriptInit", function()
	Thread.Create(function()
       
        local racemainblip = Game.AddBlipForCoord(RaceMenu[1], RaceMenu[2], RaceMenu[3])
        Game.ChangeBlipSprite(racemainblip, 65)
        Game.ChangeBlipScale(racemainblip, 0.7)
        Game.ChangeBlipNameFromAscii(racemainblip, "Street race")
        Game.SetBlipAsShortRange(racemainblip, true)
			
        while true do 
            Thread.Pause(0) 
            if(not IVMenu.ItemCore.isOpen) then 
			    Game.DrawCheckpointWithAlpha(RaceMenu[1], RaceMenu[2], RaceMenu[3]-1, 1.1, 255, 255, 255, 100)
			    if(IsPlayerNearCoords(RaceMenu[1], RaceMenu[2], RaceMenu[3], 2.0)) then
                    Game.PrintStringWithLiteralStringNow("STRING", "Press ~y~E ~w~to ~y~open race menu", 1000, 1)
                    if(Game.IsGameKeyboardKeyJustPressed(18)) then
                        Events.Call("Open_IVMenu", {MenuID})
                    end
                end
            end

            if(RaceOn) then 
                ManageRace()
            end
		end
	end)
end)